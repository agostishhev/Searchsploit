package com.arterialist.searchsploit.activities;

import android.app.DownloadManager;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.arterialist.searchsploit.R;
import com.arterialist.searchsploit.models.Exploit;
import com.arterialist.searchsploit.utils.HawkUtil;
import com.arterialist.searchsploit.utils.NetworkUtils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import butterknife.BindView;
import butterknife.OnClick;

public class ExploitActivity extends BaseActivity implements Toolbar.OnMenuItemClickListener {

    @BindView(R.id.toolbar)
    Toolbar toolbar;

    @BindView(R.id.exploit_id)
    TextView idTV;
    @BindView(R.id.title)
    TextView titleTV;
    @BindView(R.id.author)
    TextView authorTV;
    @BindView(R.id.date)
    TextView dateTV;
    @BindView(R.id.platform)
    TextView platformTV;
    @BindView(R.id.platform_logo)
    ImageView platformIV;
    @BindView(R.id.type)
    TextView typeTV;
    @BindView(R.id.port)
    TextView portTV;
    @BindView(R.id.file_type)
    TextView fileTypeTV;
    @BindView(R.id.file_type_image)
    ImageView fileTypeIV;
    @BindView(R.id.preview)
    Button previewB;

    public static final String EXTRA_EXPLOIT = "EXTRA_EXPLOIT";

    private Exploit exploit;
    private long previewId;
    private BroadcastReceiver downloadReceiver;
    private String downloadedPath;

    public static Intent createIntent(Context context, Exploit exploit) {
        Intent intent = new Intent(context, ExploitActivity.class);
        intent.putExtra(EXTRA_EXPLOIT, exploit);
        return intent;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_exploit);

        toolbar.setTitleTextColor(Color.WHITE);

        Exploit exploit = getIntent().getParcelableExtra(EXTRA_EXPLOIT);
        this.exploit = exploit;

        toolbar.setTitle(exploit.getTitle().substring(0, 20) + "...");
        setSupportActionBar(toolbar);

        toolbar.setOnMenuItemClickListener(this);

        idTV.setText(String.valueOf(exploit.getId()));
        titleTV.setText(exploit.getTitle());
        authorTV.setText(exploit.getAuthor());
        dateTV.setText(exploit.getDate());
        platformTV.setText(exploit.getPlatform());
        typeTV.setText(exploit.getType());
        portTV.setText(String.valueOf(exploit.getPort()));
        handlePlatform();
        handleFileType();

        if (NetworkUtils.isOnline(this)) {
            String pathRoot = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS) + "/Searchsploit/Previews/";
            String fileName = exploit.getPath().substring(exploit.getPath().lastIndexOf("/") + 1);
            downloadedPath = pathRoot + fileName;

            NetworkUtils.DownloadOptions downloadOptions = new NetworkUtils.DownloadOptions();
            downloadOptions
                    .setUrl(exploit.getUrl())
                    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_HIDDEN)
                    .setPathToFile(pathRoot)
                    .setFileName(fileName)
                    .setAllowScanningByMediaScanner(true)
                    .create();

            previewId = NetworkUtils.downloadFile(this, downloadOptions);

            downloadReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    DownloadManager.Query query = new DownloadManager.Query();
                    query.setFilterById(previewId);
                    Cursor cursor = ((DownloadManager) getSystemService(DOWNLOAD_SERVICE)).query(query);
                    if (cursor != null) {
                        if (cursor.moveToFirst()) {
                            if (cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS)) == DownloadManager.STATUS_SUCCESSFUL) {
                                previewB.setEnabled(true);
                            }
                        }
                    }
                }
            };
            registerReceiver(downloadReceiver, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));
        } else {
            previewB.setEnabled(true);
        }
    }

    private void handleFileType() {
        String fileType = exploit.getPath().substring(exploit.getPath().lastIndexOf('.') + 1);
        int identifier = getResources().getIdentifier(fileType, "drawable", getPackageName());
        if (identifier != 0) {
            fileTypeIV.setImageResource(identifier);
        } else {
            fileTypeTV.setText(fileType);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        ArrayList<Exploit> bookmarks = HawkUtil.get(HawkUtil.BOOKMARKED_EXPLOITS_KEY);
        boolean contains = false;
        for (Exploit bookmark : bookmarks) {
            if (bookmark.getId() == exploit.getId()) {
                contains = true;
                break;
            }
        }
        if (contains) {
            getMenuInflater().inflate(R.menu.menu_exploit_bookmarked, menu);
        } else {
            getMenuInflater().inflate(R.menu.menu_exploit, menu);
        }
        return true;
    }

    private void handlePlatform() {
        int resId;

        switch (exploit.getPlatform()) {
            case "aix":
                resId = R.drawable.aix;
                break;

            case "android":
                resId = R.drawable.android;
                break;

            case "freebsd":
            case "freebsd_x86":
            case "freebsd_x86-64":
                resId = R.drawable.freebsd;
                break;

            case "hardware":
                resId = R.drawable.hardware;
                break;

            case "hp-ux":
                resId = R.drawable.hp;
                break;

            case "ios":
                resId = R.drawable.ios;
                break;

            case "java":
                resId = R.drawable.java;
                break;

            case "json":
                resId = R.drawable.json;
                break;

            case "lin_x86":
            case "lin_x86-64":
            case "linux":
            case "linux_mips":
            case "linux_ppc":
            case "linux_sparc":
                resId = R.drawable.linux;
                break;

            case "macos":
            case "osx":
            case "osx_ppc":
                resId = R.drawable.mac;
                break;

            case "novell":
                resId = R.drawable.novell;
                break;

            case "perl":
                resId = R.drawable.perl;
                break;

            case "php":
                resId = R.drawable.php_platform;
                break;

            case "python":
                resId = R.drawable.python;
                break;

            case "ruby":
                resId = R.drawable.ruby;
                break;

            case "unix":
                resId = R.drawable.unix;
                break;

            case "win_x86":
            case "win_x86-64":
            case "windows":
                resId = R.drawable.win;
                break;

            default:
                resId = -1;
        }

        if (resId != -1) {
            platformIV.setImageResource(resId);
            platformIV.setVisibility(View.VISIBLE);
        }
    }

    @OnClick(R.id.download)
    public void onDownloadClick() {
        if (NetworkUtils.isOnline(this)) {

            String path = exploit.getPath();
            String pathRoot = Environment.DIRECTORY_DOCUMENTS + "/Searchsploit/Downloads/" + path.substring(0, path.lastIndexOf("/"));
            String fileName = path.substring(path.lastIndexOf("/"));

            NetworkUtils.DownloadOptions downloadOptions = new NetworkUtils.DownloadOptions();
            downloadOptions
                    .setUrl(exploit.getUrl())
                    .setPathToFile(pathRoot)
                    .setFileName(fileName)
                    .setTitle(String.format(getString(R.string.text_normal_downloading_exploit), fileName))
                    .setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                    .setAllowScanningByMediaScanner(true)
                    .create();

            NetworkUtils.downloadFile(this, downloadOptions);

            Toast.makeText(this, "Downloading...", Toast.LENGTH_SHORT).show();
        } else {
            showNoInternetDialog();
        }
    }

    @OnClick(R.id.preview)
    public void onPreviewClick() {
        if (downloadReceiver == null) {
            if (NetworkUtils.isOnline(this)) {
                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(exploit.getUrl()));
                startActivity(intent);
            } else {
                showNoInternetDialog();
            }
        } else {
            try {
                String previewText = new Scanner(new File(String.format("%s%s",
                        Environment.getExternalStorageDirectory().getPath(),
                        downloadedPath))).useDelimiter("\\A").next();
                startActivity(PreviewActivity.createIntent(this, previewText, exploit.getTitle(), exploit.getPath().substring(exploit.getPath().lastIndexOf('.') + 1)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
    }

    private void showNoInternetDialog() {
        new AlertDialog.Builder(this)
                .setTitle(R.string.text_normal_no_network)
                .setMessage(R.string.text_normal_connect_to_internet)
                .setCancelable(false)
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                })
                .show();
    }

    @Override
    public boolean onMenuItemClick(MenuItem item) {
        ArrayList<Exploit> bookmarks = HawkUtil.get(HawkUtil.BOOKMARKED_EXPLOITS_KEY);
        switch (item.getItemId()) {
            case R.id.bookmark:
                bookmarks.add(exploit);
                HawkUtil.set(HawkUtil.BOOKMARKED_EXPLOITS_KEY, bookmarks);
                break;

            case R.id.remove_bookmark:
                Exploit same = exploit;
                for (Exploit bookmark : bookmarks) {
                    if (bookmark.getId() == exploit.getId()) {
                        same = bookmark;
                        break;
                    }
                }
                bookmarks.remove(same);
                HawkUtil.set(HawkUtil.BOOKMARKED_EXPLOITS_KEY, bookmarks);
                break;
        }
        toolbar.getMenu().clear();
        onCreateOptionsMenu(toolbar.getMenu());
        return false;
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            Runtime.getRuntime().exec(new String[]{"/system/bin/sh", "-c", String.format("rm /sdcard/%s", downloadedPath)});
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (downloadReceiver != null) {
            unregisterReceiver(downloadReceiver);
        }
    }
}
