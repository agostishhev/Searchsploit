package com.arterialist.searchsploit.models;

import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.IntDef;
import android.support.annotation.NonNull;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;


public class Exploit implements Parcelable, Comparable {

    public static final int COMPARING_PARAMETER_TITLE = 0;
    public static final int COMPARING_PARAMETER_DATE = 1;
    public static final int COMPARING_PARAMETER_PLATFORM = 2;

    private int id;
    private String path;
    private String title;
    private String date;
    private String author;
    private String platform;
    private String type;
    private int port;

    private int comparingParameter = 0;

    private String url = "https://raw.githubusercontent.com/offensive-security/exploit-database/master/";
    private String binaryUrl = "https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/";

    public Exploit(int id, String path, String title, String date, String author, String platform, String type, int port) {
        this.id = id;
        this.path = path;
        this.title = title;
        this.date = date;
        this.author = author;
        this.platform = platform;
        this.type = type;
        this.port = port;
        url += path;
    }

    private Exploit(Parcel in) {
        id = in.readInt();
        path = in.readString();
        title = in.readString();
        date = in.readString();
        author = in.readString();
        platform = in.readString();
        type = in.readString();
        port = in.readInt();
        url = in.readString();
    }

    public static final Creator<Exploit> CREATOR = new Creator<Exploit>() {
        @Override
        public Exploit createFromParcel(Parcel in) {
            return new Exploit(in);
        }

        @Override
        public Exploit[] newArray(int size) {
            return new Exploit[size];
        }
    };

    public int getId() {
        return id;
    }

    public String getPath() {
        return path;
    }

    public String getTitle() {
        return title;
    }

    public String getDate() {
        return date;
    }

    public String getAuthor() {
        return author;
    }

    public String getPlatform() {
        return platform;
    }

    public String getType() {
        return type;
    }

    public int getPort() {
        return port;
    }

    public String getUrl() {
        return url;
    }

    public void setComparingParameter(@ComparingParameter int comparingParameter) {
        this.comparingParameter = comparingParameter;
    }

    @Retention(RetentionPolicy.SOURCE)
    @IntDef({COMPARING_PARAMETER_TITLE, COMPARING_PARAMETER_DATE, COMPARING_PARAMETER_PLATFORM})
    @interface ComparingParameter {
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeInt(id);
        dest.writeString(path);
        dest.writeString(title);
        dest.writeString(date);
        dest.writeString(author);
        dest.writeString(platform);
        dest.writeString(type);
        dest.writeInt(port);
        dest.writeString(url);
    }

    @Override
    public int compareTo(@NonNull Object o) {
        switch (comparingParameter) {
            case COMPARING_PARAMETER_TITLE:
                return ((Exploit) o).getTitle().compareTo(title) > 0 ? -1 : 1;

            case COMPARING_PARAMETER_DATE:
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                Date thatDate = null;
                Date thisDate = null;
                try {
                    thisDate = dateFormat.parse(date);
                    thatDate = dateFormat.parse(((Exploit) o).getDate());
                } catch (ParseException e) {
                    e.printStackTrace();
                }
                assert thisDate != null;
                return thisDate.after(thatDate) ? -1 : thisDate.before(thatDate) ? 1 : 0;

            case COMPARING_PARAMETER_PLATFORM:
                return ((Exploit) o).getPlatform().compareTo(platform) > 0 ? -1 : 1;

            default:
                return Integer.valueOf(((Exploit) o).getId()).compareTo(id);
        }
    }
}
